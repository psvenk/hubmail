query Issues($user: String!, $repo: String!, $numIssues: Int!,
$cursor: String) {
  repository(owner: $user, name: $repo) {
    issues(first: $numIssues, after: $cursor) {
      nodes {
        ... issue,
      },
      pageInfo {
        endCursor,
      },
    },
  },
}

query PullRequests($user: String!, $repo: String!, $numPullRequests: Int!,
$cursor: String) {
  repository(owner: $user, name: $repo) {
    pullRequests(first: $numPullRequests, after: $cursor) {
      nodes {
        ... pullRequest,
      },
      pageInfo {
        endCursor,
      },
    },
  }
}

query Issue($user: String!, $repo: String!, $number: Int!) {
  repository(owner: $user, name: $repo) {
    issue(number:$number) {
      ... issue,
    },
  },
}

query PullRequest($user: String!, $repo: String!, $number: Int!) {
  repository(owner: $user, name: $repo) {
    pullRequest(number: $number) {
      ... pullRequest,
    },
  },
}

query Comments($id: ID!, $numComments: Int!, $cursor: String) {
  node(id: $id) {
    ... on Issue {
      comments(first: $numComments, after: $cursor) {
        ... comments,
      },
    },
    ... on PullRequest {
      comments(first: $numComments, after: $cursor) {
        ... comments,
      },
    },
  },
}

fragment issue on Issue {
  id,
  title,
  author {
    ... actor,
  },
  body,
  createdAt,
}

fragment pullRequest on PullRequest {
  id,
  url,
  title,
  author {
    ... actor,
  },
  body,
  createdAt,
}

fragment comments on IssueCommentConnection {
  nodes {
    databaseId,
    author {
      ... actor,
    },
    body,
    createdAt,
  },
  pageInfo {
    endCursor,
  },
}

fragment actor on Actor {
  ... on User {
    login,
    name,
    email,
  },
  ... on Organization {
    login,
    name,
    emailOrNull: email,
  },
  ... on Bot {
    login,
  },
  ... on Mannequin {
    login,
    emailOrNull: email,
  },
  ... on EnterpriseUserAccount {
    login,
    name,
  },
}
