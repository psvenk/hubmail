#!/usr/bin/env python3
"""hubmail: a tool to export GitHub issues and pull requests as email messages

Usage:
  hubmail (issue|pr) [options] USER REPO NUMBER

Options:
  -c, --comments         Include comments
  -w COLS, --wrap=COLS   Wrap lines of text to a certain number of columns
                         [default: 0]
"""
# SPDX-License-Identifier: LGPL-2.1-or-later

import sys
import os
import email.utils as eu
from time import time, gmtime, asctime
import textwrap
import itertools
import re

import requests
from docopt import docopt
from dateutil.parser import isoparse

try:
    from dotenv import load_dotenv
except ModuleNotFoundError:
    pass

def run_query(token, query):
    request = requests.post("https://api.github.com/graphql",
                            json={"query": query},
                            headers={"Authorization": f"Bearer {token}"})
    if request.status_code != 200:
        raise Exception(f"Fail with {request.status_code}\n{query}")
    result = request.json()

    if "errors" in result:
        raise Exception(result["errors"])
    else:
        return result

def get_issue(token, user, repo, number, options):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        issue(number:{number}) {{
            title,
            author {{
                login
            }},
            body,
            createdAt
            { '''
            comments(first:20) {
                nodes {
                    databaseId,
                    author {
                        login
                    },
                    body,
                    createdAt
                }
            }
            ''' if options['comments'] else '' }
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["issue"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_pr(token, user, repo, number, options):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        pullRequest(number:{number}) {{
            url,
            { '''
            title,
            comments(first:20) {
                nodes {
                    databaseId,
                    author {
                        login
                    },
                    body,
                    createdAt
                }
            }
            ''' if options['comments'] else '' }
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["pullRequest"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_user(token, login):
    query = f"""{{
    user(login:"{login}") {{
        login,
        name,
        email
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["user"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def format_email(name, address, timestamp, subject, body, options,
                 heading, message_id=None, in_reply_to=None, references=None):
    if references is None and in_reply_to is not None:
        references = [in_reply_to]

    body = body.replace("\r\n", "\n")

    try:
        cols = int(options["wrap"])
    except ValueError:
        cols = 0
    if cols > 0:
        body = "\n".join(
            textwrap.fill(
                line, cols, expand_tabs=False, replace_whitespace=False,
                break_long_words=False, break_on_hyphens=False,
                subsequent_indent=(
                    "> " if line.startswith("> ")
                    else ">" if line.startswith(">")
                    else ""))
            for line in body.splitlines())

    # Replace "From" at the beginning of a line with ">From";
    # include any quoting so that this process is reversible.
    body = re.sub(r"^([> ]*)From", r">\1From", body, flags=re.MULTILINE)

    return (
        textwrap.dedent(f"""\
            From nobody@localhost {asctime(gmtime(time()))}
            From: {eu.formataddr((name, address))}
            Date: {eu.format_datetime(timestamp)}
            Subject: {subject}
            Content-Type: text/plain; charset=UTF-8
            """)
        + (f"Message-ID: <{message_id}>\n" if message_id else "")
        + (f"In-Reply-To: <{in_reply_to}>\n" if in_reply_to else "")
        + (f"References: <{', '.join(references)}>\n" if references else "")
        + "\n" + body)

def format_issue(token, user, repo, number, options):
    issue = get_issue(token, user, repo, number, options)
    author = get_user(token, issue["author"]["login"])

    result = format_email(author["name"] or author["login"], author["email"],
                          isoparse(issue["createdAt"]), issue["title"],
                          issue["body"], options, f"{user}/{repo}#{number}",
                          f"{user}/{repo}/issues/{number}@github.com")
    if not options["comments"]:
        return result
    return result + format_comments(
        issue["comments"]["nodes"], f"Re: {issue['title']}", options,
        (user, repo, "issues", number))

def format_pr(token, user, repo, number, options):
    pr = get_pr(token, user, repo, number, options)
    request = requests.get(f"{pr['url']}.patch")
    if request.status_code != 200:
        print(f"{pr['url']}: fail with {request.status_code}", file=sys.stderr)

    thread_info = (user, repo, "pull", number)
    result = re.sub(r"(\nSubject: .*\n)", r"\1"
                    + f"Message-ID: <{'/'.join(thread_info)}@github.com>\n",
                    request.text)

    if not options["comments"]:
        return result
    return result + format_comments(
        pr["comments"]["nodes"], f"Re: {pr['title']}", options, thread_info)

def format_comments(comments, subject, options, thread_info):
    user, repo, _, number = thread_info
    thread_name = f"{user}/{repo}#{number}"

    result = ""
    orig_message_id = f"{'/'.join(thread_info)}@github.com"
    for comment in comments:
        author = get_user(token, comment["author"]["login"])
        message_id = f"{'/'.join(thread_info)}/c{comment['databaseId']}@github.com"
        result += "\n\n" + format_email(
            author["name"] or author["login"], author["email"],
            isoparse(comment["createdAt"]), subject, comment["body"], options,
            thread_name, message_id, orig_message_id)
    return result

if __name__ == "__main__":
    arguments = docopt(__doc__)
    matches = [(opt, re.match(r"--(\w+)", opt)) for opt in arguments.keys()]
    options = {match.group(1): arguments[opt]
               for opt, match in matches if match}

    try:
        load_dotenv()
    except NameError:
        pass
    token = os.getenv("HUBMAIL_TOKEN")
    if not token:
        print("No API token found. Have you set the HUBMAIL_TOKEN " +
              "environment variable?", file=sys.stderr)
        exit(1)

    if arguments["issue"]:
        print(format_issue(token, arguments["USER"], arguments["REPO"],
                           arguments["NUMBER"], options))
    if arguments["pr"]:
        print(format_pr(token, arguments["USER"], arguments["REPO"],
                        arguments["NUMBER"], options))
