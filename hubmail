#!/usr/bin/env python3
"""hubmail: a tool to export GitHub issues and pull requests as email messages

Usage:
  hubmail (-i|-p) [-n] USER REPO NUMBER

Options:
  -i     Get issue #NUMBER from GitHub
  -p     Get pull request #NUMBER from GitHub
  -n     Do not include comments
"""

import sys
import os
import email.utils as eu
import textwrap
import itertools
import re

import requests
from docopt import docopt
from dotenv import load_dotenv
from dateutil.parser import isoparse

# Maximum line length
TEXTWIDTH = 72

def run_query(token, query):
    request = requests.post("https://api.github.com/graphql",
                            json={"query": query},
                            headers={"Authorization": f"Bearer {token}"})
    if request.status_code != 200:
        raise Exception(f"Fail with {request.status_code}\n{query}")
    result = request.json()

    if "errors" in result:
        raise Exception(result["errors"])
    else:
        return result

def get_issue(token, user, repo, issueno, include_comments=True):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        issue(number:{issueno}) {{
            title,
            author {{
                login
            }},
            body,
            createdAt
            { '''
            comments(first:20) {
                nodes {
                    author {
                        login
                    },
                    body,
                    createdAt
                }
            }
            ''' if include_comments else '' }
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["issue"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_pr(token, user, repo, prno, include_comments=True):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        pullRequest(number:{prno}) {{
            url,
            { '''
            title,
            comments(first:20) {
                nodes {
                    author {
                        login
                    },
                    body,
                    createdAt
                }
            }
            ''' if include_comments else '' }
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["pullRequest"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_user(token, login):
    query = f"""{{
    user(login:"{login}") {{
        login,
        name,
        email
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["user"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def fill(text, **kwargs):
    return textwrap.fill(
        text, TEXTWIDTH, expand_tabs=False, replace_whitespace=False,
        drop_whitespace=False, break_long_words=False, break_on_hyphens=False,
        **kwargs
    )

def format_email(name, address, timestamp, subject, body):
    body = "\n".join(
        fill("\n".join(g), subsequent_indent=match.group(0)
             if match and match.group(0).startswith(">") else "")
        for match, g in itertools.groupby(
            body.replace("\r\n", "\n").splitlines(),
            lambda line: re.match(r"(?:\W+ |>)|$", line)
        )
    )
    # Remove leading whitespace when it is exactly one space
    body = re.sub(r"^ (?=\S)", "", body, flags=re.MULTILINE)
    body = re.sub(r"^>  (?=\S)", "> ", body, flags=re.MULTILINE)
    # Remove all trailing whitespace
    body = re.sub(r"^\S\s+$", "\1", body, flags=re.MULTILINE)

    return textwrap.dedent(f"""\
        From: {eu.formataddr((name, address))}
        Date: {eu.format_datetime(timestamp)}
        Subject: {subject}
        \n""") + body

def format_issue(token, user, repo, issueno, include_comments=True):
    issue = get_issue(token, user, repo, number, include_comments)
    author = get_user(token, issue["author"]["login"])

    result = format_email(author["name"] or author["login"], author["email"],
                          isoparse(issue["createdAt"]), issue["title"],
                          issue["body"])
    if not include_comments:
        return result
    return result + format_comments(issue["comments"]["nodes"],
                                    f"Re: {issue['title']}")

def format_pr(token, user, repo, prno, include_comments=True):
    pr = get_pr(token, user, repo, prno)
    request = requests.get(f"{pr['url']}.patch")
    if request.status_code != 200:
        print(f"{pr['url']}: fail with {request.status_code}", file=sys.stderr)
    result = request.text

    if not include_comments:
        return result
    return result + format_comments(pr["comments"]["nodes"],
                                    f"Re: {pr['title']}")

def format_comments(comments, subject):
    result = ""
    for comment in comments:
        author = get_user(token, comment["author"]["login"])
        result += "\n\n" + format_email(
            author["name"] or author["login"], author["email"],
            isoparse(comment["createdAt"]), subject, comment["body"]
        )
    return result

if __name__ == "__main__":
    arguments = docopt(__doc__)
    user = arguments["USER"]
    repo = arguments["REPO"]
    number = arguments["NUMBER"]
    include_comments = not arguments["-n"]

    load_dotenv()
    token = os.getenv("HUBMAIL_TOKEN")
    if not token:
        print("No API token found. Have you set the HUBMAIL_TOKEN " +
              "environment variable?", file=sys.stderr)
        exit(1)

    if arguments["-i"]:
        print(format_issue(token, user, repo, number, include_comments))
    if arguments["-p"]:
        print(format_pr(token, user, repo, number, include_comments))
