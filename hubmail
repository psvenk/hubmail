#!/usr/bin/env python3
"""hubmail: a tool to export GitHub issues and pull requests as email messages

Usage:
  hubmail (-i|-p) USER REPO NUMBER
"""

import sys
import os
import email.utils as eu
import textwrap

import requests
from docopt import docopt
from dotenv import load_dotenv
from dateutil.parser import isoparse

# Maximum line length
TEXTWIDTH = 72

def run_query(token, query):
    request = requests.post("https://api.github.com/graphql",
                            json={"query": query},
                            headers={"Authorization": f"Bearer {token}"})
    if request.status_code != 200:
        raise Exception(f"Fail with {request.status_code}\n{query}")
    result = request.json()

    if "errors" in result:
        raise Exception(result["errors"])
    else:
        return result

def get_issue(token, user, repo, issueno, include_comments=True):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        issue(number:{issueno}) {{
            title,
            author {{
                login
            }},
            body,
            createdAt
            { '''
            comments(first:20) {
                nodes {
                    author {
                        login
                    },
                    body,
                    createdAt
                }
            }
            ''' if include_comments else '' }
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["issue"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_pr(token, user, repo, prno):
    query = f"""{{
    repository(owner:"{user}", name:"{repo}") {{
        pullRequest(number:{prno}) {{
            url
        }}
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["repository"]["pullRequest"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def get_user(token, login):
    query = f"""{{
    user(login:"{login}") {{
        login,
        name,
        email
    }}
    }}"""
    try:
        return run_query(token, query)["data"]["user"]
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)

def format_email(name, address, timestamp, subject, body):
    return textwrap.dedent(f"""\
        From: {eu.formataddr((name, address))}
        Date: {eu.format_datetime(timestamp)}
        Subject: {subject}
        \n""") + textwrap.fill(body, TEXTWIDTH,
                               break_long_words=False,
                               break_on_hyphens=False)

def format_issue(token, user, repo, issueno, include_comments=True):
    issue = get_issue(token, user, repo, number, include_comments)
    title = issue["title"]
    author = get_user(token, issue["author"]["login"])

    result = format_email(author["name"] or author["login"], author["email"],
                          isoparse(issue["createdAt"]), title, issue["body"])
    if not include_comments:
        return result
    for comment in issue["comments"]["nodes"]:
        author = get_user(token, comment["author"]["login"])
        result += "\n\n" + format_email(
            author["name"] or author["login"], author["email"],
            isoparse(comment["createdAt"]), f"Re: {title}", comment["body"]
        )
    return result

def format_pr(token, user, repo, prno):
    pr = get_pr(token, user, repo, prno)
    request = requests.get(f"{pr['url']}.patch")
    if request.status_code != 200:
        print(f"{pr['url']}: fail with {request.status_code}", file=sys.stderr)
    return request.text

if __name__ == "__main__":
    arguments = docopt(__doc__)
    user = arguments["USER"]
    repo = arguments["REPO"]
    number = arguments["NUMBER"]

    load_dotenv()
    token = os.getenv("HUBMAIL_TOKEN")
    if not token:
        print("No API token found. Have you set the HUBMAIL_TOKEN " +
              "environment variable?", file=sys.stderr)
        exit(1)

    if arguments["-i"]:
        print(format_issue(token, user, repo, number))
    if arguments["-p"]:
        print(format_pr(token, user, repo, number))
